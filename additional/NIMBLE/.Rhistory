type='RW_PF_block',
control=list(latents='x'))
## build and compile pMCMC sampler
stateSpaceMCMC=buildMCMC(stateSpaceMCMCconf)
compiledList=compileNimble(stateSpaceModel, stateSpaceMCMC, resetFunctions=TRUE)
## run compiled sampler for 10000 iterations
compiledList$stateSpaceMCMC$run(10000)
## load the nimble library and set seed
library('nimble')
library('nimbleSMC')
library('coda')
set.seed(1)
simulate_data = function(T, a, sigPN, sigOE)
{
X = rep(0,T)
Y = rep(0,T)
X[1] = rnorm(1)
Y[1] = sigOE*exp(X[1]/2)*rnorm(1)
for (t in 2:T)
{
X[t] = a*X[t-1] + sigPN*rnorm(1)
Y[t] = sigOE*exp(X[t]/2)*rnorm(1)
}
return(Y)
}
a = 0.5
sigPN = 1
sigOE = 1
T = 200
Y = simulate_data(T, a, sigPN, sigOE)
plot(Y)
## load the nimble library and set seed
library('nimble')
library('nimbleSMC')
library('coda')
set.seed(1)
simulate_data = function(T, a, sigPN, sigOE)
{
X = rep(0,T)
Y = rep(0,T)
X[1] = rnorm(1)
Y[1] = sigOE*exp(X[1]/2)*rnorm(1)
for (t in 2:T)
{
X[t] = a*X[t-1] + sigPN*rnorm(1)
Y[t] = sigOE*exp(X[t]/2)*rnorm(1)
}
return(list(X=X,Y=Y))
}
a = 0.5
sigPN = 1
sigOE = 1
T = 200
dat = simulate_data(T, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
plot(Y)
plot(X)
plot(Y, tyle="l")
plot(Y, tyle=l)
lines(Y)
line(Y)
lines(Y)
lines(Y, tyle="l")
library('ggplot2')
geom_line(X)
## load the nimble library and set seed
library('nimble')
library('nimbleSMC')
library('coda')
set.seed(1)
simulate_data = function(T, a, sigPN, sigOE)
{
X = rep(0,T)
Y = rep(0,T)
X[1] = rnorm(1)
Y[1] = sigOE*exp(X[1]/2)*rnorm(1)
for (t in 2:T)
{
X[t] = a*X[t-1] + sigPN*rnorm(1)
Y[t] = sigOE*exp(X[t]/2)*rnorm(1)
}
return(list(X=X,Y=Y))
}
a = 0.5
sigPN = 1
sigOE = 1
T = 200
dat = simulate_data(T, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
plot(Y, tyle="o")
plot(Y, type="o")
plot(X, type="o")
## define the model
stateSpaceCode=nimbleCode(
{
a ~ dunif(-0.99, 0.99)
sigPN ~ dinvgamma(shape=3, scale=3)
sigOE ~ dinvgamma(shape=3, scale=3)
x[1] ~ dnorm(0, sd=1)
y[1] ~ dnorm(0, sd=sigOE*exp(x[1]/2))
for (t in 2:T)
{
x[t] ~ dnorm(a*x[t-1], sd=sigPN)
y[t] ~ dnorm(0, sd=sigOE*exp(x[t]/2))
}
})
## define data, constants, and initial values
data = list(y=Y)
constants = list(T=length(data$y))
inits = list(a=0, sigPN=0.5, sigOE=0.5)
## build the model
stateSpaceModel=nimbleModel(stateSpaceCode,
data=data,
constants=constants,
inits=inits,
check=FALSE)
## create MCMC specification for the state space model
stateSpaceMCMCconf=configureMCMC(stateSpaceModel, nodes=NULL)
## add a block pMCMC sampler for a, b, sigPN, and sigOE
stateSpaceMCMCconf$addSampler(target=c('a', 'b', 'sigPN', 'sigOE'),
type='RW_PF_block',
control=list(latents='x'))
## add a block pMCMC sampler for a, b, sigPN, and sigOE
stateSpaceMCMCconf$addSampler(target=c('a', 'sigPN', 'sigOE'),
type='RW_PF_block',
control=list(latents='x'))
## build and compile pMCMC sampler
stateSpaceMCMC=buildMCMC(stateSpaceMCMCconf)
compiledList=compileNimble(stateSpaceModel, stateSpaceMCMC, resetFunctions=TRUE)
## run compiled sampler for 10000 iterations
compiledList$stateSpaceMCMC$run(10000)
## load the nimble library and set seed
library('nimble')
library('nimbleSMC')
library('coda')
set.seed(1)
simulate_data = function(t, a, sigPN, sigOE)
{
X = rep(0,T)
Y = rep(0,T)
X[1] = rnorm(1)
Y[1] = sigOE*exp(X[1]/2)*rnorm(1)
for (i in 2:t)
{
X[i] = a*X[i-1] + sigPN*rnorm(1)
Y[i] = sigOE*exp(X[i]/2)*rnorm(1)
}
return(list(X=X,Y=Y))
}
a = 0.5
sigPN = 1
sigOE = 1
t = 200
dat = simulate_data(t, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
plot(Y, type="o")
plot(X, type="o")
## define the model
stateSpaceCode=nimbleCode(
{
a ~ dunif(-0.99, 0.99)
sigPN ~ dinvgamma(shape=3, scale=3)
sigOE ~ dinvgamma(shape=3, scale=3)
x[1] ~ dnorm(0, sd=1)
y[1] ~ dnorm(0, sd=sigOE*exp(x[1]/2))
for (i in 2:t)
{
x[i] ~ dnorm(a*x[i-1], sd=sigPN)
y[i] ~ dnorm(0, sd=sigOE*exp(x[i]/2))
}
})
## define data, constants, and initial values
data = list(y=Y)
constants = list(t=length(data$y))
inits = list(a=0, sigPN=0.5, sigOE=0.5)
## build the model
stateSpaceModel=nimbleModel(stateSpaceCode,
data=data,
constants=constants,
inits=inits,
check=FALSE)
## create MCMC specification for the state space model
stateSpaceMCMCconf=configureMCMC(stateSpaceModel, nodes=NULL)
## add a block pMCMC sampler for a, b, sigPN, and sigOE
stateSpaceMCMCconf$addSampler(target=c('a', 'sigPN', 'sigOE'),
type='RW_PF_block',
control=list(latents='x'))
## build and compile pMCMC sampler
stateSpaceMCMC=buildMCMC(stateSpaceMCMCconf)
compiledList=compileNimble(stateSpaceModel, stateSpaceMCMC, resetFunctions=TRUE)
## run compiled sampler for 10000 iterations
compiledList$stateSpaceMCMC$run(10000)
## load the nimble library and set seed
library('nimble')
library('nimbleSMC')
library('coda')
set.seed(1)
simulate_data = function(t, a, sigPN, sigOE)
{
X = rep(0,T)
Y = rep(0,T)
X[1] = rnorm(1)
Y[1] = sigOE*exp(X[1]/2)*rnorm(1)
for (i in 2:t)
{
X[i] = a*X[i-1] + sigPN*rnorm(1)
Y[i] = sigOE*exp(X[i]/2)*rnorm(1)
}
return(list(X=X,Y=Y))
}
a = 0.5
sigPN = 1
sigOE = 1
t = 200
dat = simulate_data(t, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
plot(Y, type="o")
plot(X, type="o")
## define the model
stateSpaceCode=nimbleCode(
{
a ~ dunif(-0.99, 0.99)
sigPN ~ dinvgamma(shape=3, scale=3)
sigOE ~ dinvgamma(shape=3, scale=3)
x[1] ~ dnorm(0, sd=1)
y[1] ~ dnorm(0, sd=sigOE*exp(x[1]/2))
for (i in 2:t)
{
x[i] ~ dnorm(a*x[i-1], sd=sigPN)
y[i] ~ dnorm(0, sd=sigOE*exp(x[i]/2))
}
})
## define data, constants, and initial values
data = list(y=Y)
constants = list(t=length(data$y))
inits = list(a=0, sigPN=0.5, sigOE=0.5)
## build the model
stateSpaceModel=nimbleModel(stateSpaceCode,
data=data,
constants=constants,
inits=inits,
check=FALSE)
## create MCMC specification for the state space model
stateSpaceMCMCconf=configureMCMC(stateSpaceModel, nodes=NULL)
## add a block pMCMC sampler for a, b, sigPN, and sigOE
stateSpaceMCMCconf$addSampler(target=c('a', 'sigPN', 'sigOE'),
type='RW_PF_block',
control=list(latents='x'))
## build and compile pMCMC sampler
stateSpaceMCMC=buildMCMC(stateSpaceMCMCconf)
compiledList=compileNimble(stateSpaceModel, stateSpaceMCMC, resetFunctions=TRUE)
## run compiled sampler for 10000 iterations
compiledList$stateSpaceMCMC$run(10000)
par(mfrow=c(2,2))
posteriorSamps=as.mcmc(as.matrix(compiledList$stateSpaceMCMC$mvSamples))
traceplot(posteriorSamps[,'a'], ylab='a')
traceplot(posteriorSamps[,'sigPN'], ylab='sigPN')
traceplot(posteriorSamps[,'sigOE'], ylab='sigOE')
c(mean(posteriorSamps[,'a']), sd(posteriorSamps[,'a']))
mean(posteriorSamps[,'sigPN'])
mean(posteriorSamps[,'sigOE'])
source('~/Desktop/codes/DC-BATS/NIMBLE/test.R', echo=TRUE)
source('~/Desktop/codes/DC-BATS/NIMBLE/files.R', echo=TRUE)
library('coda')
set.seed(1)
a = 0.5
sigPN = 1
sigOE = 1
t = 200
dat = simulate_data(t, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
plot(Y, type="o")
plot(X, type="o")
## define data, constants, and initial values
data = list(y=Y)
constants = list(t=length(data$y))
inits = list(a=0, sigPN=0.5, sigOE=0.5)
library('coda')
set.seed(1)
a = 0.5
sigPN = 1
sigOE = 1
t = 200
dat = simulate_data(t, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
plot(Y, type="o")
plot(X, type="o")
## define data, constants, and initial values
data = list(y=Y)
constants = list(t=length(data$y))
inits = list(a=0, sigPN=0.5, sigOE=0.5)
library('coda')
set.seed(1)
a = 0.5
sigPN = 1
sigOE = 1
t = 200
dat = simulate_data(t, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
par(mfrow=c(2,1))
plot(Y, type="o")
plot(X, type="o")
library('coda')
set.seed(1)
a = 0.5
sigPN = 1
sigOE = 1
t = 200
dat = simulate_data(t, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
par(mfrow=c(2,1))
plot(X, type="o")
plot(Y, type="o")
## define data, constants, and initial values
data = list(y=Y)
constants = list(t=length(data$y))
inits = list(a=0, sigPN=0.5, sigOE=0.5)
stateSpaceModel=nimbleModel(stateSpaceCode, data=data, constants=constants,
inits=inits, check=FALSE)
## create MCMC specification for the state space model
stateSpaceMCMCconf=configureMCMC(stateSpaceModel, nodes=NULL)
## add a block pMCMC sampler for a, b, sigPN, and sigOE
stateSpaceMCMCconf$addSampler(target=c('a', 'sigPN', 'sigOE'),
type='RW_PF_block',
control=list(latents='x'))
## build and compile pMCMC sampler
stateSpaceMCMC=buildMCMC(stateSpaceMCMCconf)
compiledList=compileNimble(stateSpaceModel, stateSpaceMCMC, resetFunctions=TRUE)
## run compiled sampler for 10000 iterations
compiledList$stateSpaceMCMC$run(1000)
par(mfrow=c(2,2))
posteriorSamps = as.mcmc(as.matrix(compiledList$stateSpaceMCMC$mvSamples))
traceplot(posteriorSamps[,'a'], ylab='a')
traceplot(posteriorSamps[,'sigPN'], ylab='sigPN')
traceplot(posteriorSamps[,'sigOE'], ylab='sigOE')
c(mean(posteriorSamps[,'a']), sd(posteriorSamps[,'a']))
mean(posteriorSamps[,'sigPN'])
mean(posteriorSamps[,'sigOE'])
a
c(sigPN, sigOE)
## run compiled sampler for 10000 iterations
compiledList$stateSpaceMCMC$run(10000)
par(mfrow=c(2,2))
posteriorSamps = as.mcmc(as.matrix(compiledList$stateSpaceMCMC$mvSamples))
traceplot(posteriorSamps[,'a'], ylab='a')
traceplot(posteriorSamps[,'sigPN'], ylab='sigPN')
traceplot(posteriorSamps[,'sigOE'], ylab='sigOE')
c(mean(posteriorSamps[,'a']), sd(posteriorSamps[,'a']))
mean(posteriorSamps[,'sigPN'])
mean(posteriorSamps[,'sigOE'])
c(a, sigPN, sigOE)
source('~/Desktop/codes/DC-BATS/NIMBLE/test.R', echo=TRUE)
source('~/Desktop/codes/DC-BATS/NIMBLE/files.R', echo=TRUE)
Y
Y(10)
Y[10]
source('~/Desktop/codes/DC-BATS/NIMBLE/files.R', echo=TRUE)
library('coda')
set.seed(1)
a = 0.3
sigPN = 0.5
sigOE = 1.2
t = 200
dat = simulate_data(t, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
par(mfrow=c(2,1))
plot(X, type="o")
plot(Y, type="o")
m = 1
YY = rep(t,m)
for (i in 1:T)
{
for (j in 1:m)
{
YY[i,j] = Y[i]
}
Y
YY = matrix(0L, nrow=t, ncol=m)
for (i in 1:T)
{
for (j in 1:m)
{
YY[i,j] = Y[i]
}
dimension(YY)
dim(YY)
dim(YY)[0]
dim(YY,0)
nrow(YY)
set.seed(1)
a = 0.3
sigPN = 0.5
sigOE = 1.2
t = 200
dat = simulate_data(t, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
par(mfrow=c(2,1))
plot(X, type="o")
plot(Y, type="o")
## define data, constants, and initial values
m = 1
YY = matrix(0L, nrow=t, ncol=m)
for (i in 1:T)
{
for (j in 1:m)
{
YY[i,j] = Y[i]
}
data = list(y=YY)
constants = list(t=nrow(data$y), m=m)
inits = list(a=0, sigPN=0.5, sigOE=0.5)
stateSpaceModel=nimbleModel(stateSpaceCode, data=data, constants=constants,
inits=inits, check=FALSE)
## create MCMC specification for the state space model
stateSpaceMCMCconf=configureMCMC(stateSpaceModel, nodes=NULL)
stateSpaceMCMCconf$addSampler(target=c('a', 'sigPN', 'sigOE'),
type='RW_PF_block',
control=list(latents='x'))
## build and compile pMCMC sampler
stateSpaceMCMC=buildMCMC(stateSpaceMCMCconf)
compiledList=compileNimble(stateSpaceModel, stateSpaceMCMC, resetFunctions=TRUE)
## run compiled sampler for 10000 iterations
compiledList$stateSpaceMCMC$run(1000)
par(mfrow=c(2,2))
posteriorSamps = as.mcmc(as.matrix(compiledList$stateSpaceMCMC$mvSamples))
traceplot(posteriorSamps[,'a'], ylab='a')
traceplot(posteriorSamps[,'sigPN'], ylab='sigPN')
traceplot(posteriorSamps[,'sigOE'], ylab='sigOE')
c(mean(posteriorSamps[,'a']), sd(posteriorSamps[,'a']))
mean(posteriorSamps[,'sigPN'])
mean(posteriorSamps[,'sigOE'])
c(a, sigPN, sigOE)
m
source('~/Desktop/codes/DC-BATS/NIMBLE/files.R', echo=TRUE)
T
library('coda')
set.seed(1)
a = 0.3
sigPN = 0.5
sigOE = 1.2
t = 100
dat = simulate_data(t, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
par(mfrow=c(2,1))
plot(X, type="o")
plot(Y, type="o")
## define data, constants, and initial values
m = 1
YY = matrix(0L, nrow=t, ncol=m)
for (i in 1:T)
{
for (j in 1:m)
{
YY[i,j] = Y[i]
}
YY
source('~/Desktop/codes/DC-BATS/NIMBLE/files.R', echo=TRUE)
source('~/Desktop/codes/DC-BATS/NIMBLE/test.R', echo=TRUE)
library('coda')
set.seed(1)
a = 0.3
sigPN = 0.5
sigOE = 1.2
t = 100
dat = simulate_data(t, a, sigPN, sigOE)
X = dat$X
Y = dat$Y
par(mfrow=c(2,1))
plot(X, type="o")
plot(Y, type="o")
source('~/Desktop/codes/DC-BATS/NIMBLE/expt_m5.R', echo=TRUE)
c(a, sigPN, sigOE)
source('~/Desktop/codes/DC-BATS/NIMBLE/expt_m1.R', echo=TRUE)
m
source('~/Desktop/codes/DC-BATS/NIMBLE/expt_m5.R', echo=TRUE)
aa
c(mean(posteriorSamps_m5[,'a']), sd(posteriorSamps_m5[,'a']))
## create trace plots for each parameter
par(mfrow=c(2,2))
posteriorSamps_m5 = as.mcmc(as.matrix(compiledList_m5$stateSpaceMCMC$mvSamples))
traceplot(posteriorSamps_m5[,'a'], ylab='a')
traceplot(posteriorSamps_m5[,'sigPN'], ylab='sigPN')
traceplot(posteriorSamps_m5[,'sigOE'], ylab='sigOE')
c(mean(posteriorSamps_m5[,'a']), sd(posteriorSamps_m5[,'a']))
mean(posteriorSamps_m5[,'sigPN'])
mean(posteriorSamps_m5[,'sigOE'])
source('~/Desktop/codes/DC-BATS/NIMBLE/expt_m5.R', echo=TRUE)
sd(posteriorSamps_m5[,'a'])
sd(posteriorSamps_m1[,'a'])
sd(posteriorSamps_m1[,'sigOE'])
sd(posteriorSamps_m5[,'sigOE'])
sd(posteriorSamps_m1[,'sigPN'])
'])
sd(posteriorSamps_m1[,'sigOE'])/sd(posteriorSamps_m5[,'sigOE'])
sd(posteriorSamps_m1[,'a'])/sd(posteriorSamps_m5[,'a'])
sd(posteriorSamps_m1[,'sigPN'])/sd(posteriorSamps_m5[,'sigPN'])
sd(posteriorSamps_m1[,'sigOE'])/sd(posteriorSamps_m5[,'sigOE'])
sd(posteriorSamps_m1[,'a'])/sd(posteriorSamps_m5[,'a'])
c(mean(posteriorSamps_m1[,'sigPN']), mean(posteriorSamps_m5[,'sigPN']))
c(mean(posteriorSamps_m1[,'sigOE']), mean(posteriorSamps_m5[,'sigOE']))
c(mean(posteriorSamps_m1[,'a']), mean(posteriorSamps_m5[,'a']))
